りんご　（ 0, 0, 32, 32)
レモン　(32, 0, 32, 32)
メロン　(0, 32, 32, 32)
桃	(32, 32, 32, 32)












#include "MyGameMain.h"
#include "MyPG.h"



// ---画像情報---
const ML::Box2D SRC_APPLE(0, 0, 32, 32);
const ML::Box2D SRC_LEMON(32, 0, 32, 32);
const ML::Box2D SRC_MELON(0, 32, 32, 32);
const ML::Box2D SRC_PEACH(32, 32, 32, 32);


// 配列方
//enum SRC_FRUITS_POS { APPLE = 0, LEMON, MELON, PEACH };
//const ML::Box2D SRC_FRUITS[] = {
//	ML::Box2D(0, 0, 32, 32),
//	ML::Box2D(32, 0, 32, 32),
//	ML::Box2D(0, 32, 32, 32),
//	ML::Box2D(32, 32, 32, 32)
//};
// -------------


//ゲーム情報
DI::Mouse		mouse;		//マウスの入力を得る
int				 posX;		//マウス座標
int				 posY;		//---------

enum State		//果物の状態
{
	OFF,		//クリックされていないとき
	ON			//左クリックされているとき
	
};
enum nekostate	//猫の状態
{
	Normal,		//通常
	nyaa,		//果物（正解）
	bad			//果物（不正解）

};
struct Neko
{
	nekostate		state;		//猫の状態
	ML::Box2D		HIT;		//猫のあたり判定
};
Neko	neko;

struct  fruit
{
	State		state;	//果物の状態
	ML::Box2D	hit;	//果物のあたり判定
};
//果物の変数
fruit	fruits[4];		//果物の個数とりあえず3個
fruit* selectedFruit = nullptr;



//-----------------------------------------------------------------------------
//初期化処理
//機能概要：プログラム起動時に１回実行される（素材などの準備を行う）
//-----------------------------------------------------------------------------
void  MyGameMain_Initalize()
{
	//画像を読み込む処理
	DG::Image_Create("neko",   "./data/image/nekodot.png");	//猫1
	DG::Image_Create("neko2", "./data/image/nekodot2.png");	//猫2
	DG::Image_Create("FRUITS", "./data/image/Fruits.png");	//猫2
	//DG::Image_Create("apple", "./data/image/apple.gif");	//リンゴ

	posX = 0;
	posY = 0;
	
	neko.HIT = ML::Box2D(200, 50, 48, 48);		//猫の矩形
	neko.state = Normal;						//猫の初期化


	for (int i = 0; i < 4; ++i)
	{
		fruits[i].hit = ML::Box2D(0 + (32 * i), 238, 32, 32);	//果物の矩形
		fruits[i].state = OFF;		//果物の初期化
	}

}
//-----------------------------------------------------------------------------
//解放処理
//機能概要：プログラム終了時に１回実行される（素材などの解放を行う）
//-----------------------------------------------------------------------------
void  MyGameMain_Finalize()
{
	DG::Image_Erase("neko");  //明示的に解放したい場合
	DG::Image_Erase("neko2");  //明示的に解放したい場合
	DG::Image_Erase("FRUITS"); //明示的に解放したい場合

}
//-----------------------------------------------------------------------------
//更新処理
//機能概要：ゲームの１フレームに当たる処理
//-----------------------------------------------------------------------------
void  MyGameMain_UpDate()
{
	mouse = DI::Mouse_GetState();

	//マウスカーソルの位置をposX,Yにそのまま代入
	posX = mouse.cursorPos.x - 16;
	posY = mouse.cursorPos.y - 16;
	//マウスカーソルと矩形の判定
	ML::Box2D mousePos(posX, posY, 1, 1);

	for (int i = 0; i < 4; ++i) 
	{
		//if (mouse.LB.on && fruits[i].hit.Hit(mousePos))		//もし果物の矩形に重なり、マウスの左ボタンが押されている間
		ML::Box2D curHit = fruits[i].hit;
		if ( mouse.LB.on && 
			(curHit.x - 16 < posX && curHit.x - 16 + curHit.w > posX &&
			 curHit.y - 16 < posY && curHit.y - 16 + curHit.h > posY))
		{
			selectedFruit = &fruits[i];
			fruits[i].state = ON;		//果物の状態をON
			fruits[i].hit.x = posX;		//果物のあたり判定の座標とマウスの座標を同期
			fruits[i].hit.y = posY;		//---------------------------
			if (fruits[i].state == ON && neko.state == Normal && neko.HIT.Hit(curHit))		//果物の状態がONの時、通常状態の猫に当たると
			{
				neko.state = nyaa;			//猫の状態をnyaaにする

				if (neko.state == nyaa)		//猫の状態がnyaaなら
				{

				}
			}
		}

		if (selectedFruit != nullptr) {
			selectedFruit->hit.x = posX;		//果物のあたり判定の座標とマウスの座標を同期
			selectedFruit->hit.y = posY;		//---------------------------
		}

		if (mouse.LB.off)				//マウスの左ボタンが離されたら
		{
			selectedFruit = nullptr;
			fruits[i].state = OFF;		//果物の状態をOFF

			if (fruits[i].state == OFF)			//果物の状態がOFFなら
			{
				fruits[i].hit = ML::Box2D(0 + (32 * i), 238, 32, 32);					//初期座標に戻す
			}
		}
	}
}
//-----------------------------------------------------------------------------
//描画処理
//機能概要：ゲームの１フレームに当たる表示処理 ２Ｄ
//-----------------------------------------------------------------------------
void  MyGameMain_Render2D()
{
	//猫の元画像
		ML::Box2D  src(0, 0, 48, 48);
	//猫の描画
	if (neko.state == Normal)
	{
		
		DG::Image_Draw("neko", neko.HIT, src);
	}
		

	//猫2の描画
	if (neko.state == nyaa)
	{
		DG::Image_Draw("neko2", neko.HIT, src);
		
		neko.state = Normal;
	}
		
	//果物の描画
	for (int i = 0; i < 4; ++i)
		switch (i)
		{
		case 0:
			DG::Image_Draw("FRUITS", fruits[0].hit, SRC_APPLE);
		break;
		case 1:
			DG::Image_Draw("FRUITS", fruits[1].hit, SRC_LEMON);
			break;
		case 2:
			DG::Image_Draw("FRUITS", fruits[2].hit, SRC_MELON);
			break;
		case 3:
			DG::Image_Draw("FRUITS", fruits[3].hit, SRC_PEACH);
			break;
		}
		
		
}
